
// Utility functions for license generation and validation

/**
 * Generate a secure license key with embedded information
 * This function contains your proprietary algorithm for license key generation
 */
export const generateSecureLicenseKey = (type: string, days: number, secretKey: string = "YOUR_SECRET_KEY"): string => {
  // Define type prefix
  const typePrefix = type.charAt(0).toUpperCase();
  
  // Create a hash-like value based on the parameters and secret key
  const hash = simpleHash(`${type}-${days}-${secretKey}-${new Date().getMonth()}`);
  
  // Convert hash to characters spread across the key segments
  const hashChars = hash.toString(36).toUpperCase().padStart(12, '0');
  
  // Create key segments with embedded data
  const firstPart = typePrefix + hashChars.substring(0, 3);
  const secondPart = encodeNumber(days) + hashChars.substring(3, 6);
  const thirdPart = hashChars.substring(6, 10);
  const fourthPart = hashChars.substring(10) + getRandomChars(2);
  
  return `${firstPart}-${secondPart}-${thirdPart}-${fourthPart}`;
};

/**
 * Validate a license key generated by your system
 * Returns information about the license if valid, null if invalid
 */
export const validateSecureLicenseKey = (key: string, secretKey: string = "YOUR_SECRET_KEY"): { type: string, days: number } | null => {
  try {
    const parts = key.split('-');
    if (parts.length !== 4) return null;
    
    // Extract type from first character
    const typeChar = parts[0].charAt(0);
    let type: string;
    
    switch (typeChar) {
      case 'T': type = 'trial'; break;
      case 'M': type = 'monthly'; break;
      case 'Y': type = 'yearly'; break;
      default: return null;
    }
    
    // Extract days encoded in the second segment
    const daysEncoded = parts[1].substring(0, 2);
    const days = decodeNumber(daysEncoded);
    
    // Additional validation can be added here
    
    return { type, days };
  } catch (error) {
    console.error("Error validating license key:", error);
    return null;
  }
};

// Helper function to create a simple hash
const simpleHash = (str: string): number => {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return Math.abs(hash);
};

// Helper function to encode a number to characters
const encodeNumber = (num: number): string => {
  // Custom encoding algorithm (example uses base 36)
  return num.toString(36).toUpperCase().padStart(2, '0').substring(0, 2);
};

// Helper function to decode characters back to a number
const decodeNumber = (encoded: string): number => {
  // Custom decoding algorithm (matching the encoding above)
  return parseInt(encoded, 36);
};

// Generate random characters for padding
const getRandomChars = (length: number): string => {
  const chars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789";
  let result = "";
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};
